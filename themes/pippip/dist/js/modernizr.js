/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./.modernizrrc.js":
/*!*************************!*\
  !*** ./.modernizrrc.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n;\n\n(function (window) {\n  var hadGlobal = 'Modernizr' in window;\n  var oldGlobal = window.Modernizr;\n  /*!\n   * modernizr v3.8.0\n   * Build https://modernizr.com/download?-addtest-printshiv-setclasses-testprop-dontmin\n   *\n   * Copyright (c)\n   *  Faruk Ates\n   *  Paul Irish\n   *  Alex Sexton\n   *  Ryan Seddon\n   *  Patrick Kettner\n   *  Stu Cox\n   *  Richard Herrera\n   *  Veeck\n  \n   * MIT License\n   */\n\n  /*\n   * Modernizr tests which native CSS3 and HTML5 features are available in the\n   * current UA and makes the results available to you in two ways: as properties on\n   * a global `Modernizr` object, and as classes on the `<html>` element. This\n   * information allows you to progressively enhance your pages with a granular level\n   * of control over the experience.\n  */\n\n  ;\n\n  (function (window, document, undefined) {\n    var tests = [];\n    /**\n     * ModernizrProto is the constructor for Modernizr\n     *\n     * @class\n     * @access public\n     */\n\n    var ModernizrProto = {\n      // The current version, dummy\n      _version: '3.8.0',\n      // Any settings that don't work as separate modules\n      // can go in here as configuration.\n      _config: {\n        'classPrefix': '',\n        'enableClasses': true,\n        'enableJSClass': true,\n        'usePrefixes': true\n      },\n      // Queue of tests\n      _q: [],\n      // Stub these for people who are listening\n      on: function on(test, cb) {\n        // I don't really think people should do this, but we can\n        // safe guard it a bit.\n        // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.\n        // This is in case people listen to synchronous tests. I would leave it out,\n        // but the code to *disallow* sync tests in the real version of this\n        // function is actually larger than this.\n        var self = this;\n        setTimeout(function () {\n          cb(self[test]);\n        }, 0);\n      },\n      addTest: function addTest(name, fn, options) {\n        tests.push({\n          name: name,\n          fn: fn,\n          options: options\n        });\n      },\n      addAsyncTest: function addAsyncTest(fn) {\n        tests.push({\n          name: null,\n          fn: fn\n        });\n      }\n    }; // Fake some of Object.create so we can force non test results to be non \"own\" properties.\n\n    var Modernizr = function Modernizr() {};\n\n    Modernizr.prototype = ModernizrProto; // Leak modernizr globally when you `require` it rather than force it here.\n    // Overwrite name so constructor name is nicer :D\n\n    Modernizr = new Modernizr();\n    var classes = [];\n    /**\n     * is returns a boolean if the typeof an obj is exactly type.\n     *\n     * @access private\n     * @function is\n     * @param {*} obj - A thing we want to check the type of\n     * @param {string} type - A string to compare the typeof against\n     * @returns {boolean} true if the typeof the first parameter is exactly the specified type, false otherwise\n     */\n\n    function is(obj, type) {\n      return _typeof(obj) === type;\n    }\n\n    ;\n    /**\n     * Run through all tests and detect their support in the current UA.\n     *\n     * @access private\n     * @returns {void}\n     */\n\n    function testRunner() {\n      var featureNames;\n      var feature;\n      var aliasIdx;\n      var result;\n      var nameIdx;\n      var featureName;\n      var featureNameSplit;\n\n      for (var featureIdx in tests) {\n        if (tests.hasOwnProperty(featureIdx)) {\n          featureNames = [];\n          feature = tests[featureIdx]; // run the test, throw the return value into the Modernizr,\n          // then based on that boolean, define an appropriate className\n          // and push it into an array of classes we'll join later.\n          //\n          // If there is no name, it's an 'async' test that is run,\n          // but not directly added to the object. That should\n          // be done with a post-run addTest call.\n\n          if (feature.name) {\n            featureNames.push(feature.name.toLowerCase());\n\n            if (feature.options && feature.options.aliases && feature.options.aliases.length) {\n              // Add all the aliases into the names list\n              for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\n                featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\n              }\n            }\n          } // Run the test, or use the raw value if it's not a function\n\n\n          result = is(feature.fn, 'function') ? feature.fn() : feature.fn; // Set each of the names on the Modernizr object\n\n          for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\n            featureName = featureNames[nameIdx]; // Support dot properties as sub tests. We don't do checking to make sure\n            // that the implied parent tests have been added. You must call them in\n            // order (either in the test, or make the parent test a dependency).\n            //\n            // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\n            // hashtag famous last words\n\n            featureNameSplit = featureName.split('.');\n\n            if (featureNameSplit.length === 1) {\n              Modernizr[featureNameSplit[0]] = result;\n            } else {\n              // cast to a Boolean, if not one already or if it doesnt exist yet (like inputtypes)\n              if (!Modernizr[featureNameSplit[0]] || Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n                Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n              }\n\n              Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\n            }\n\n            classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\n          }\n        }\n      }\n    }\n\n    ;\n    /**\n     * docElement is a convenience wrapper to grab the root element of the document\n     *\n     * @access private\n     * @returns {HTMLElement|SVGElement} The root element of the document\n     */\n\n    var docElement = document.documentElement;\n    /**\n     * A convenience helper to check if the document we are running in is an SVG document\n     *\n     * @access private\n     * @returns {boolean}\n     */\n\n    var isSVG = docElement.nodeName.toLowerCase() === 'svg';\n    /**\n     * setClasses takes an array of class names and adds them to the root element\n     *\n     * @access private\n     * @function setClasses\n     * @param {string[]} classes - Array of class names\n     */\n    // Pass in an and array of class names, e.g.:\n    //  ['no-webp', 'borderradius', ...]\n\n    function setClasses(classes) {\n      var className = docElement.className;\n      var classPrefix = Modernizr._config.classPrefix || '';\n\n      if (isSVG) {\n        className = className.baseVal;\n      } // Change `no-js` to `js` (independently of the `enableClasses` option)\n      // Handle classPrefix on this too\n\n\n      if (Modernizr._config.enableJSClass) {\n        var reJS = new RegExp('(^|\\\\s)' + classPrefix + 'no-js(\\\\s|$)');\n        className = className.replace(reJS, '$1' + classPrefix + 'js$2');\n      }\n\n      if (Modernizr._config.enableClasses) {\n        // Add the new classes\n        if (classes.length > 0) {\n          className += ' ' + classPrefix + classes.join(' ' + classPrefix);\n        }\n\n        if (isSVG) {\n          docElement.className.baseVal = className;\n        } else {\n          docElement.className = className;\n        }\n      }\n    }\n\n    ;\n    /**\n     * hasOwnProp is a shim for hasOwnProperty that is needed for Safari 2.0 support\n     *\n     * @author kangax\n     * @access private\n     * @function hasOwnProp\n     * @param {object} object - The object to check for a property\n     * @param {string} property - The property to check for\n     * @returns {boolean}\n     */\n    // hasOwnProperty shim by kangax needed for Safari 2.0 support\n\n    var hasOwnProp;\n\n    (function () {\n      var _hasOwnProperty = {}.hasOwnProperty;\n      /* istanbul ignore else */\n\n      /* we have no way of testing IE 5.5 or safari 2,\n       * so just assume the else gets hit */\n\n      if (!is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined')) {\n        hasOwnProp = function hasOwnProp(object, property) {\n          return _hasOwnProperty.call(object, property);\n        };\n      } else {\n        hasOwnProp = function hasOwnProp(object, property) {\n          /* yes, this can give false positives/negatives, but most of the time we don't care about those */\n          return property in object && is(object.constructor.prototype[property], 'undefined');\n        };\n      }\n    })(); // _l tracks listeners for async tests, as well as tests that execute after the initial run\n\n\n    ModernizrProto._l = {};\n    /**\n     * Modernizr.on is a way to listen for the completion of async tests. Being\n     * asynchronous, they may not finish before your scripts run. As a result you\n     * will get a possibly false negative `undefined` value.\n     *\n     * @memberOf Modernizr\n     * @name Modernizr.on\n     * @access public\n     * @function on\n     * @param {string} feature - String name of the feature detect\n     * @param {Function} cb - Callback function returning a Boolean - true if feature is supported, false if not\n     * @returns {void}\n     * @example\n     *\n     * ```js\n     * Modernizr.on('flash', function( result ) {\n     *   if (result) {\n     *    // the browser has flash\n     *   } else {\n     *     // the browser does not have flash\n     *   }\n     * });\n     * ```\n     */\n\n    ModernizrProto.on = function (feature, cb) {\n      // Create the list of listeners if it doesn't exist\n      if (!this._l[feature]) {\n        this._l[feature] = [];\n      } // Push this test on to the listener list\n\n\n      this._l[feature].push(cb); // If it's already been resolved, trigger it on next tick\n\n\n      if (Modernizr.hasOwnProperty(feature)) {\n        // Next Tick\n        setTimeout(function () {\n          Modernizr._trigger(feature, Modernizr[feature]);\n        }, 0);\n      }\n    };\n    /**\n     * _trigger is the private function used to signal test completion and run any\n     * callbacks registered through [Modernizr.on](#modernizr-on)\n     *\n     * @memberOf Modernizr\n     * @name Modernizr._trigger\n     * @access private\n     * @function _trigger\n     * @param {string} feature - string name of the feature detect\n     * @param {Function|boolean} [res] - A feature detection function, or the boolean =\n     * result of a feature detection function\n     * @returns {void}\n     */\n\n\n    ModernizrProto._trigger = function (feature, res) {\n      if (!this._l[feature]) {\n        return;\n      }\n\n      var cbs = this._l[feature]; // Force async\n\n      setTimeout(function () {\n        var i, cb;\n\n        for (i = 0; i < cbs.length; i++) {\n          cb = cbs[i];\n          cb(res);\n        }\n      }, 0); // Don't trigger these again\n\n      delete this._l[feature];\n    };\n    /**\n     * addTest allows you to define your own feature detects that are not currently\n     * included in Modernizr (under the covers it's the exact same code Modernizr\n     * uses for its own [feature detections](https://github.com/Modernizr/Modernizr/tree/master/feature-detects)).\n     * Just like the official detects, the result\n     * will be added onto the Modernizr object, as well as an appropriate className set on\n     * the html element when configured to do so\n     *\n     * @memberOf Modernizr\n     * @name Modernizr.addTest\n     * @optionName Modernizr.addTest()\n     * @optionProp addTest\n     * @access public\n     * @function addTest\n     * @param {string|Object} feature - The string name of the feature detect, or an\n     * object of feature detect names and test\n     * @param {Function|boolean} test - Function returning true if feature is supported,\n     * false if not. Otherwise a boolean representing the results of a feature detection\n     * @returns {Object} the Modernizr object to allow chaining\n     * @example\n     *\n     * The most common way of creating your own feature detects is by calling\n     * `Modernizr.addTest` with a string (preferably just lowercase, without any\n     * punctuation), and a function you want executed that will return a boolean result\n     *\n     * ```js\n     * Modernizr.addTest('itsTuesday', function() {\n     *  var d = new Date();\n     *  return d.getDay() === 2;\n     * });\n     * ```\n     *\n     * When the above is run, it will set Modernizr.itstuesday to `true` when it is tuesday,\n     * and to `false` every other day of the week. One thing to notice is that the names of\n     * feature detect functions are always lowercased when added to the Modernizr object. That\n     * means that `Modernizr.itsTuesday` will not exist, but `Modernizr.itstuesday` will.\n     *\n     *\n     *  Since we only look at the returned value from any feature detection function,\n     *  you do not need to actually use a function. For simple detections, just passing\n     *  in a statement that will return a boolean value works just fine.\n     *\n     * ```js\n     * Modernizr.addTest('hasjquery', 'jQuery' in window);\n     * ```\n     *\n     * Just like before, when the above runs `Modernizr.hasjquery` will be true if\n     * jQuery has been included on the page. Not using a function saves a small amount\n     * of overhead for the browser, as well as making your code much more readable.\n     *\n     * Finally, you also have the ability to pass in an object of feature names and\n     * their tests. This is handy if you want to add multiple detections in one go.\n     * The keys should always be a string, and the value can be either a boolean or\n     * function that returns a boolean.\n     *\n     * ```js\n     * var detects = {\n     *  'hasjquery': 'jQuery' in window,\n     *  'itstuesday': function() {\n     *    var d = new Date();\n     *    return d.getDay() === 2;\n     *  }\n     * }\n     *\n     * Modernizr.addTest(detects);\n     * ```\n     *\n     * There is really no difference between the first methods and this one, it is\n     * just a convenience to let you write more readable code.\n     */\n\n\n    function addTest(feature, test) {\n      if (_typeof(feature) === 'object') {\n        for (var key in feature) {\n          if (hasOwnProp(feature, key)) {\n            addTest(key, feature[key]);\n          }\n        }\n      } else {\n        feature = feature.toLowerCase();\n        var featureNameSplit = feature.split('.');\n        var last = Modernizr[featureNameSplit[0]]; // Again, we don't check for parent test existence. Get that right, though.\n\n        if (featureNameSplit.length === 2) {\n          last = last[featureNameSplit[1]];\n        }\n\n        if (typeof last !== 'undefined') {\n          // we're going to quit if you're trying to overwrite an existing test\n          // if we were to allow it, we'd do this:\n          //   var re = new RegExp(\"\\\\b(no-)?\" + feature + \"\\\\b\");\n          //   docElement.className = docElement.className.replace( re, '' );\n          // but, no rly, stuff 'em.\n          return Modernizr;\n        }\n\n        test = typeof test === 'function' ? test() : test; // Set the value (this is the magic, right here).\n\n        if (featureNameSplit.length === 1) {\n          Modernizr[featureNameSplit[0]] = test;\n        } else {\n          // cast to a Boolean, if not one already\n          if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n            Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n          }\n\n          Modernizr[featureNameSplit[0]][featureNameSplit[1]] = test;\n        } // Set a single class (either `feature` or `no-feature`)\n\n\n        setClasses([(!!test && test !== false ? '' : 'no-') + featureNameSplit.join('-')]); // Trigger the event\n\n        Modernizr._trigger(feature, test);\n      }\n\n      return Modernizr; // allow chaining.\n    } // After all the tests are run, add self to the Modernizr prototype\n\n\n    Modernizr._q.push(function () {\n      ModernizrProto.addTest = addTest;\n    });\n    /**\n     * @optionName html5printshiv\n     * @optionProp html5printshiv\n     */\n    // Take the html5 variable out of the html5shiv scope so we can return it.\n\n\n    var html5;\n\n    if (!isSVG) {\n      /**\n       * @preserve HTML5 Shiv 3.7.3 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed\n       */\n      ;\n\n      (function (window, document) {\n        /*jshint evil:true */\n\n        /** version */\n        var version = '3.7.3';\n        /** Preset options */\n\n        var options = window.html5 || {};\n        /** Used to skip problem elements */\n\n        var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;\n        /** Not all elements can be cloned in IE **/\n\n        var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;\n        /** Detect whether the browser supports default html5 styles */\n\n        var supportsHtml5Styles;\n        /** Name of the expando, to work with multiple documents or to re-shiv one document */\n\n        var expando = '_html5shiv';\n        /** The id for the the documents expando */\n\n        var expanID = 0;\n        /** Cached data for each document */\n\n        var expandoData = {};\n        /** Detect whether the browser supports unknown elements */\n\n        var supportsUnknownElements;\n\n        (function () {\n          try {\n            var a = document.createElement('a');\n            a.innerHTML = '<xyz></xyz>'; //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles\n\n            supportsHtml5Styles = 'hidden' in a;\n\n            supportsUnknownElements = a.childNodes.length == 1 || function () {\n              // assign a false positive if unable to shiv\n              document.createElement('a');\n              var frag = document.createDocumentFragment();\n              return typeof frag.cloneNode == 'undefined' || typeof frag.createDocumentFragment == 'undefined' || typeof frag.createElement == 'undefined';\n            }();\n          } catch (e) {\n            // assign a false positive if detection fails => unable to shiv\n            supportsHtml5Styles = true;\n            supportsUnknownElements = true;\n          }\n        })();\n        /*--------------------------------------------------------------------------*/\n\n        /**\n         * Creates a style sheet with the given CSS text and adds it to the document.\n         * @private\n         * @param {Document} ownerDocument The document.\n         * @param {String} cssText The CSS text.\n         * @returns {StyleSheet} The style element.\n         */\n\n\n        function addStyleSheet(ownerDocument, cssText) {\n          var p = ownerDocument.createElement('p'),\n              parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;\n          p.innerHTML = 'x<style>' + cssText + '</style>';\n          return parent.insertBefore(p.lastChild, parent.firstChild);\n        }\n        /**\n         * Returns the value of `html5.elements` as an array.\n         * @private\n         * @returns {Array} An array of shived element node names.\n         */\n\n\n        function getElements() {\n          var elements = html5.elements;\n          return typeof elements == 'string' ? elements.split(' ') : elements;\n        }\n        /**\n         * Extends the built-in list of html5 elements\n         * @memberOf html5\n         * @param {String|Array} newElements whitespace separated list or array of new element names to shiv\n         * @param {Document} ownerDocument The context document.\n         */\n\n\n        function addElements(newElements, ownerDocument) {\n          var elements = html5.elements;\n\n          if (typeof elements != 'string') {\n            elements = elements.join(' ');\n          }\n\n          if (typeof newElements != 'string') {\n            newElements = newElements.join(' ');\n          }\n\n          html5.elements = elements + ' ' + newElements;\n          shivDocument(ownerDocument);\n        }\n        /**\n         * Returns the data associated to the given document\n         * @private\n         * @param {Document} ownerDocument The document.\n         * @returns {Object} An object of data.\n         */\n\n\n        function getExpandoData(ownerDocument) {\n          var data = expandoData[ownerDocument[expando]];\n\n          if (!data) {\n            data = {};\n            expanID++;\n            ownerDocument[expando] = expanID;\n            expandoData[expanID] = data;\n          }\n\n          return data;\n        }\n        /**\n         * returns a shived element for the given nodeName and document\n         * @memberOf html5\n         * @param {String} nodeName name of the element\n         * @param {Document} ownerDocument The context document.\n         * @returns {Object} The shived element.\n         */\n\n\n        function createElement(nodeName, ownerDocument, data) {\n          if (!ownerDocument) {\n            ownerDocument = document;\n          }\n\n          if (supportsUnknownElements) {\n            return ownerDocument.createElement(nodeName);\n          }\n\n          if (!data) {\n            data = getExpandoData(ownerDocument);\n          }\n\n          var node;\n\n          if (data.cache[nodeName]) {\n            node = data.cache[nodeName].cloneNode();\n          } else if (saveClones.test(nodeName)) {\n            node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();\n          } else {\n            node = data.createElem(nodeName);\n          } // Avoid adding some elements to fragments in IE < 9 because\n          // * Attributes like `name` or `type` cannot be set/changed once an element\n          //   is inserted into a document/fragment\n          // * Link elements with `src` attributes that are inaccessible, as with\n          //   a 403 response, will cause the tab/window to crash\n          // * Script elements appended to fragments will execute when their `src`\n          //   or `text` property is set\n\n\n          return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;\n        }\n        /**\n         * returns a shived DocumentFragment for the given document\n         * @memberOf html5\n         * @param {Document} ownerDocument The context document.\n         * @returns {Object} The shived DocumentFragment.\n         */\n\n\n        function createDocumentFragment(ownerDocument, data) {\n          if (!ownerDocument) {\n            ownerDocument = document;\n          }\n\n          if (supportsUnknownElements) {\n            return ownerDocument.createDocumentFragment();\n          }\n\n          data = data || getExpandoData(ownerDocument);\n          var clone = data.frag.cloneNode(),\n              i = 0,\n              elems = getElements(),\n              l = elems.length;\n\n          for (; i < l; i++) {\n            clone.createElement(elems[i]);\n          }\n\n          return clone;\n        }\n        /**\n         * Shivs the `createElement` and `createDocumentFragment` methods of the document.\n         * @private\n         * @param {Document|DocumentFragment} ownerDocument The document.\n         * @param {Object} data of the document.\n         */\n\n\n        function shivMethods(ownerDocument, data) {\n          if (!data.cache) {\n            data.cache = {};\n            data.createElem = ownerDocument.createElement;\n            data.createFrag = ownerDocument.createDocumentFragment;\n            data.frag = data.createFrag();\n          }\n\n          ownerDocument.createElement = function (nodeName) {\n            //abort shiv\n            if (!html5.shivMethods) {\n              return data.createElem(nodeName);\n            }\n\n            return createElement(nodeName, ownerDocument, data);\n          };\n\n          ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' + 'var n=f.cloneNode(),c=n.createElement;' + 'h.shivMethods&&(' + // unroll the `createElement` calls\n          getElements().join().replace(/[\\w\\-:]+/g, function (nodeName) {\n            data.createElem(nodeName);\n            data.frag.createElement(nodeName);\n            return 'c(\"' + nodeName + '\")';\n          }) + ');return n}')(html5, data.frag);\n        }\n        /*--------------------------------------------------------------------------*/\n\n        /**\n         * Shivs the given document.\n         * @memberOf html5\n         * @param {Document} ownerDocument The document to shiv.\n         * @returns {Document} The shived document.\n         */\n\n\n        function shivDocument(ownerDocument) {\n          if (!ownerDocument) {\n            ownerDocument = document;\n          }\n\n          var data = getExpandoData(ownerDocument);\n\n          if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {\n            data.hasCSS = !!addStyleSheet(ownerDocument, // corrects block display not defined in IE6/7/8/9\n            'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}' + // adds styling not present in IE6/7/8/9\n            'mark{background:#FF0;color:#000}' + // hides non-rendered elements\n            'template{display:none}');\n          }\n\n          if (!supportsUnknownElements) {\n            shivMethods(ownerDocument, data);\n          }\n\n          return ownerDocument;\n        }\n        /*--------------------------------------------------------------------------*/\n\n        /**\n         * The `html5` object is exposed so that more elements can be shived and\n         * existing shiving can be detected on iframes.\n         * @type Object\n         * @example\n         *\n         * // options can be changed before the script is included\n         * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };\n         */\n\n\n        var html5 = {\n          /**\n           * An array or space separated string of node names of the elements to shiv.\n           * @memberOf html5\n           * @type Array|String\n           */\n          'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output picture progress section summary template time video',\n\n          /**\n           * current version of html5shiv\n           */\n          'version': version,\n\n          /**\n           * A flag to indicate that the HTML5 style sheet should be inserted.\n           * @memberOf html5\n           * @type Boolean\n           */\n          'shivCSS': options.shivCSS !== false,\n\n          /**\n           * Is equal to true if a browser supports creating unknown/HTML5 elements\n           * @memberOf html5\n           * @type boolean\n           */\n          'supportsUnknownElements': supportsUnknownElements,\n\n          /**\n           * A flag to indicate that the document's `createElement` and `createDocumentFragment`\n           * methods should be overwritten.\n           * @memberOf html5\n           * @type Boolean\n           */\n          'shivMethods': options.shivMethods !== false,\n\n          /**\n           * A string to describe the type of `html5` object (\"default\" or \"default print\").\n           * @memberOf html5\n           * @type String\n           */\n          'type': 'default',\n          // shivs the document according to the specified `html5` object options\n          'shivDocument': shivDocument,\n          //creates a shived element\n          createElement: createElement,\n          //creates a shived documentFragment\n          createDocumentFragment: createDocumentFragment,\n          //extends list of elements\n          addElements: addElements\n        };\n        /*--------------------------------------------------------------------------*/\n        // expose html5\n\n        window.html5 = html5; // shiv the document\n\n        shivDocument(document);\n        /*------------------------------- Print Shiv -------------------------------*/\n\n        /** Used to filter media types */\n\n        var reMedia = /^$|\\b(?:all|print)\\b/;\n        /** Used to namespace printable elements */\n\n        var shivNamespace = 'html5shiv';\n        /** Detect whether the browser supports shivable style sheets */\n\n        var supportsShivableSheets = !supportsUnknownElements && function () {\n          // assign a false negative if unable to shiv\n          var docEl = document.documentElement;\n          return !(typeof document.namespaces == 'undefined' || typeof document.parentWindow == 'undefined' || typeof docEl.applyElement == 'undefined' || typeof docEl.removeNode == 'undefined' || typeof window.attachEvent == 'undefined');\n        }();\n        /*--------------------------------------------------------------------------*/\n\n        /**\n         * Wraps all HTML5 elements in the given document with printable elements.\n         * (eg. the \"header\" element is wrapped with the \"html5shiv:header\" element)\n         * @private\n         * @param {Document} ownerDocument The document.\n         * @returns {Array} An array wrappers added.\n         */\n\n\n        function addWrappers(ownerDocument) {\n          var node,\n              nodes = ownerDocument.getElementsByTagName('*'),\n              index = nodes.length,\n              reElements = RegExp('^(?:' + getElements().join('|') + ')$', 'i'),\n              result = [];\n\n          while (index--) {\n            node = nodes[index];\n\n            if (reElements.test(node.nodeName)) {\n              result.push(node.applyElement(createWrapper(node)));\n            }\n          }\n\n          return result;\n        }\n        /**\n         * Creates a printable wrapper for the given element.\n         * @private\n         * @param {Element} element The element.\n         * @returns {Element} The wrapper.\n         */\n\n\n        function createWrapper(element) {\n          var node,\n              nodes = element.attributes,\n              index = nodes.length,\n              wrapper = element.ownerDocument.createElement(shivNamespace + ':' + element.nodeName); // copy element attributes to the wrapper\n\n          while (index--) {\n            node = nodes[index];\n            node.specified && wrapper.setAttribute(node.nodeName, node.nodeValue);\n          } // copy element styles to the wrapper\n\n\n          wrapper.style.cssText = element.style.cssText;\n          return wrapper;\n        }\n        /**\n         * Shivs the given CSS text.\n         * (eg. header{} becomes html5shiv\\:header{})\n         * @private\n         * @param {String} cssText The CSS text to shiv.\n         * @returns {String} The shived CSS text.\n         */\n\n\n        function shivCssText(cssText) {\n          var pair,\n              parts = cssText.split('{'),\n              index = parts.length,\n              reElements = RegExp('(^|[\\\\s,>+~])(' + getElements().join('|') + ')(?=[[\\\\s,>+~#.:]|$)', 'gi'),\n              replacement = '$1' + shivNamespace + '\\\\:$2';\n\n          while (index--) {\n            pair = parts[index] = parts[index].split('}');\n            pair[pair.length - 1] = pair[pair.length - 1].replace(reElements, replacement);\n            parts[index] = pair.join('}');\n          }\n\n          return parts.join('{');\n        }\n        /**\n         * Removes the given wrappers, leaving the original elements.\n         * @private\n         * @params {Array} wrappers An array of printable wrappers.\n         */\n\n\n        function removeWrappers(wrappers) {\n          var index = wrappers.length;\n\n          while (index--) {\n            wrappers[index].removeNode();\n          }\n        }\n        /*--------------------------------------------------------------------------*/\n\n        /**\n         * Shivs the given document for print.\n         * @memberOf html5\n         * @param {Document} ownerDocument The document to shiv.\n         * @returns {Document} The shived document.\n         */\n\n\n        function shivPrint(ownerDocument) {\n          var shivedSheet,\n              wrappers,\n              data = getExpandoData(ownerDocument),\n              namespaces = ownerDocument.namespaces,\n              ownerWindow = ownerDocument.parentWindow;\n\n          if (!supportsShivableSheets || ownerDocument.printShived) {\n            return ownerDocument;\n          }\n\n          if (typeof namespaces[shivNamespace] == 'undefined') {\n            namespaces.add(shivNamespace);\n          }\n\n          function removeSheet() {\n            clearTimeout(data._removeSheetTimer);\n\n            if (shivedSheet) {\n              shivedSheet.removeNode(true);\n            }\n\n            shivedSheet = null;\n          }\n\n          ownerWindow.attachEvent('onbeforeprint', function () {\n            removeSheet();\n            var imports,\n                length,\n                sheet,\n                collection = ownerDocument.styleSheets,\n                cssText = [],\n                index = collection.length,\n                sheets = Array(index); // convert styleSheets collection to an array\n\n            while (index--) {\n              sheets[index] = collection[index];\n            } // concat all style sheet CSS text\n\n\n            while (sheet = sheets.pop()) {\n              // IE does not enforce a same origin policy for external style sheets...\n              // but has trouble with some dynamically created stylesheets\n              if (!sheet.disabled && reMedia.test(sheet.media)) {\n                try {\n                  imports = sheet.imports;\n                  length = imports.length;\n                } catch (er) {\n                  length = 0;\n                }\n\n                for (index = 0; index < length; index++) {\n                  sheets.push(imports[index]);\n                }\n\n                try {\n                  cssText.push(sheet.cssText);\n                } catch (er) {}\n              }\n            } // wrap all HTML5 elements with printable elements and add the shived style sheet\n\n\n            cssText = shivCssText(cssText.reverse().join(''));\n            wrappers = addWrappers(ownerDocument);\n            shivedSheet = addStyleSheet(ownerDocument, cssText);\n          });\n          ownerWindow.attachEvent('onafterprint', function () {\n            // remove wrappers, leaving the original elements, and remove the shived style sheet\n            removeWrappers(wrappers);\n            clearTimeout(data._removeSheetTimer);\n            data._removeSheetTimer = setTimeout(removeSheet, 500);\n          });\n          ownerDocument.printShived = true;\n          return ownerDocument;\n        }\n        /*--------------------------------------------------------------------------*/\n        // expose API\n\n\n        html5.type += ' print';\n        html5.shivPrint = shivPrint; // shiv for print\n\n        shivPrint(document);\n\n        if (( false ? undefined : _typeof(module)) == 'object' && module.exports) {\n          module.exports = html5;\n        }\n      })(typeof window !== \"undefined\" ? window : this, document);\n    }\n\n    ;\n    /**\n     * contains checks to see if a string contains another string\n     *\n     * @access private\n     * @function contains\n     * @param {string} str - The string we want to check for substrings\n     * @param {string} substr - The substring we want to search the first string for\n     * @returns {boolean} true if and only if the first string 'str' contains the second string 'substr'\n     */\n\n    function contains(str, substr) {\n      return !!~('' + str).indexOf(substr);\n    }\n\n    ;\n    /**\n     * createElement is a convenience wrapper around document.createElement. Since we\n     * use createElement all over the place, this allows for (slightly) smaller code\n     * as well as abstracting away issues with creating elements in contexts other than\n     * HTML documents (e.g. SVG documents).\n     *\n     * @access private\n     * @function createElement\n     * @returns {HTMLElement|SVGElement} An HTML or SVG element\n     */\n\n    function createElement() {\n      if (typeof document.createElement !== 'function') {\n        // This is the case in IE7, where the type of createElement is \"object\".\n        // For this reason, we cannot call apply() as Object is not a Function.\n        return document.createElement(arguments[0]);\n      } else if (isSVG) {\n        return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\n      } else {\n        return document.createElement.apply(document, arguments);\n      }\n    }\n\n    ;\n    /**\n     * Create our \"modernizr\" element that we do most feature tests on.\n     *\n     * @access private\n     */\n\n    var modElem = {\n      elem: createElement('modernizr')\n    }; // Clean up this element\n\n    Modernizr._q.push(function () {\n      delete modElem.elem;\n    });\n\n    var mStyle = {\n      style: modElem.elem.style\n    }; // kill ref for gc, must happen before mod.elem is removed, so we unshift on to\n    // the front of the queue.\n\n    Modernizr._q.unshift(function () {\n      delete mStyle.style;\n    });\n    /**\n     * getBody returns the body of a document, or an element that can stand in for\n     * the body if a real body does not exist\n     *\n     * @access private\n     * @function getBody\n     * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an\n     * artificially created element that stands in for the body\n     */\n\n\n    function getBody() {\n      // After page load injecting a fake body doesn't work so check if body exists\n      var body = document.body;\n\n      if (!body) {\n        // Can't use the real body create a fake one.\n        body = createElement(isSVG ? 'svg' : 'body');\n        body.fake = true;\n      }\n\n      return body;\n    }\n\n    ;\n    /**\n     * injectElementWithStyles injects an element with style element and some CSS rules\n     *\n     * @access private\n     * @function injectElementWithStyles\n     * @param {string} rule - String representing a css rule\n     * @param {Function} callback - A function that is used to test the injected element\n     * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n     * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n     * @returns {boolean} the result of the specified callback test\n     */\n\n    function injectElementWithStyles(rule, callback, nodes, testnames) {\n      var mod = 'modernizr';\n      var style;\n      var ret;\n      var node;\n      var docOverflow;\n      var div = createElement('div');\n      var body = getBody();\n\n      if (parseInt(nodes, 10)) {\n        // In order not to give false positives we create a node for each test\n        // This also allows the method to scale for unspecified uses\n        while (nodes--) {\n          node = createElement('div');\n          node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n          div.appendChild(node);\n        }\n      }\n\n      style = createElement('style');\n      style.type = 'text/css';\n      style.id = 's' + mod; // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n      // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n\n      (!body.fake ? div : body).appendChild(style);\n      body.appendChild(div);\n\n      if (style.styleSheet) {\n        style.styleSheet.cssText = rule;\n      } else {\n        style.appendChild(document.createTextNode(rule));\n      }\n\n      div.id = mod;\n\n      if (body.fake) {\n        //avoid crashing IE8, if background image is used\n        body.style.background = ''; //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n\n        body.style.overflow = 'hidden';\n        docOverflow = docElement.style.overflow;\n        docElement.style.overflow = 'hidden';\n        docElement.appendChild(body);\n      }\n\n      ret = callback(div, rule); // If this is done after page load we don't want to remove the body so check if body exists\n\n      if (body.fake) {\n        body.parentNode.removeChild(body);\n        docElement.style.overflow = docOverflow; // Trigger layout so kinetic scrolling isn't disabled in iOS6+\n        // eslint-disable-next-line\n\n        docElement.offsetHeight;\n      } else {\n        div.parentNode.removeChild(div);\n      }\n\n      return !!ret;\n    }\n\n    ;\n    /**\n     * domToCSS takes a camelCase string and converts it to kebab-case\n     * e.g. boxSizing -> box-sizing\n     *\n     * @access private\n     * @function domToCSS\n     * @param {string} name - String name of camelCase prop we want to convert\n     * @returns {string} The kebab-case version of the supplied name\n     */\n\n    function domToCSS(name) {\n      return name.replace(/([A-Z])/g, function (str, m1) {\n        return '-' + m1.toLowerCase();\n      }).replace(/^ms-/, '-ms-');\n    }\n\n    ;\n    /**\n     * wrapper around getComputedStyle, to fix issues with Firefox returning null when\n     * called inside of a hidden iframe\n     *\n     * @access private\n     * @function computedStyle\n     * @param {HTMLElement|SVGElement} elem - The element we want to find the computed styles of\n     * @param {string|null} [pseudo] - An optional pseudo element selector (e.g. :before), of null if none\n     * @param {string} prop - A CSS property\n     * @returns {CSSStyleDeclaration} the value of the specified CSS property\n     */\n\n    function computedStyle(elem, pseudo, prop) {\n      var result;\n\n      if ('getComputedStyle' in window) {\n        result = getComputedStyle.call(window, elem, pseudo);\n        var console = window.console;\n\n        if (result !== null) {\n          if (prop) {\n            result = result.getPropertyValue(prop);\n          }\n        } else {\n          if (console) {\n            var method = console.error ? 'error' : 'log';\n            console[method].call(console, 'getComputedStyle returning null, its possible modernizr test results are inaccurate');\n          }\n        }\n      } else {\n        result = !pseudo && elem.currentStyle && elem.currentStyle[prop];\n      }\n\n      return result;\n    }\n\n    ;\n    /**\n     * nativeTestProps allows for us to use native feature detection functionality if available.\n     * some prefixed form, or false, in the case of an unsupported rule\n     *\n     * @access private\n     * @function nativeTestProps\n     * @param {array} props - An array of property names\n     * @param {string} value - A string representing the value we want to check via @supports\n     * @returns {boolean|undefined} A boolean when @supports exists, undefined otherwise\n     */\n    // Accepts a list of property names and a single value\n    // Returns `undefined` if native detection not available\n\n    function nativeTestProps(props, value) {\n      var i = props.length; // Start with the JS API: https://www.w3.org/TR/css3-conditional/#the-css-interface\n\n      if ('CSS' in window && 'supports' in window.CSS) {\n        // Try every prefixed variant of the property\n        while (i--) {\n          if (window.CSS.supports(domToCSS(props[i]), value)) {\n            return true;\n          }\n        }\n\n        return false;\n      } // Otherwise fall back to at-rule (for Opera 12.x)\n      else if ('CSSSupportsRule' in window) {\n          // Build a condition string for every prefixed variant\n          var conditionText = [];\n\n          while (i--) {\n            conditionText.push('(' + domToCSS(props[i]) + ':' + value + ')');\n          }\n\n          conditionText = conditionText.join(' or ');\n          return injectElementWithStyles('@supports (' + conditionText + ') { #modernizr { position: absolute; } }', function (node) {\n            return computedStyle(node, null, 'position') === 'absolute';\n          });\n        }\n\n      return undefined;\n    }\n\n    ;\n    /**\n     * cssToDOM takes a kebab-case string and converts it to camelCase\n     * e.g. box-sizing -> boxSizing\n     *\n     * @access private\n     * @function cssToDOM\n     * @param {string} name - String name of kebab-case prop we want to convert\n     * @returns {string} The camelCase version of the supplied name\n     */\n\n    function cssToDOM(name) {\n      return name.replace(/([a-z])-([a-z])/g, function (str, m1, m2) {\n        return m1 + m2.toUpperCase();\n      }).replace(/^-/, '');\n    }\n\n    ; // testProps is a generic CSS / DOM property test.\n    // In testing support for a given CSS property, it's legit to test:\n    //    `elem.style[styleName] !== undefined`\n    // If the property is supported it will return an empty string,\n    // if unsupported it will return undefined.\n    // We'll take advantage of this quick test and skip setting a style\n    // on our modernizr element, but instead just testing undefined vs\n    // empty string.\n    // Property names can be provided in either camelCase or kebab-case.\n\n    function testProps(props, prefixed, value, skipValueTest) {\n      skipValueTest = is(skipValueTest, 'undefined') ? false : skipValueTest; // Try native detect first\n\n      if (!is(value, 'undefined')) {\n        var result = nativeTestProps(props, value);\n\n        if (!is(result, 'undefined')) {\n          return result;\n        }\n      } // Otherwise do it properly\n\n\n      var afterInit, i, propsLength, prop, before; // If we don't have a style element, that means we're running async or after\n      // the core tests, so we'll need to create our own elements to use.\n      // Inside of an SVG element, in certain browsers, the `style` element is only\n      // defined for valid tags. Therefore, if `modernizr` does not have one, we\n      // fall back to a less used element and hope for the best.\n      // For strict XHTML browsers the hardly used samp element is used.\n\n      var elems = ['modernizr', 'tspan', 'samp'];\n\n      while (!mStyle.style && elems.length) {\n        afterInit = true;\n        mStyle.modElem = createElement(elems.shift());\n        mStyle.style = mStyle.modElem.style;\n      } // Delete the objects if we created them.\n\n\n      function cleanElems() {\n        if (afterInit) {\n          delete mStyle.style;\n          delete mStyle.modElem;\n        }\n      }\n\n      propsLength = props.length;\n\n      for (i = 0; i < propsLength; i++) {\n        prop = props[i];\n        before = mStyle.style[prop];\n\n        if (contains(prop, '-')) {\n          prop = cssToDOM(prop);\n        }\n\n        if (mStyle.style[prop] !== undefined) {\n          // If value to test has been passed in, do a set-and-check test.\n          // 0 (integer) is a valid property value, so check that `value` isn't\n          // undefined, rather than just checking it's truthy.\n          if (!skipValueTest && !is(value, 'undefined')) {\n            // Needs a try catch block because of old IE. This is slow, but will\n            // be avoided in most cases because `skipValueTest` will be used.\n            try {\n              mStyle.style[prop] = value;\n            } catch (e) {} // If the property value has changed, we assume the value used is\n            // supported. If `value` is empty string, it'll fail here (because\n            // it hasn't changed), which matches how browsers have implemented\n            // CSS.supports()\n\n\n            if (mStyle.style[prop] !== before) {\n              cleanElems();\n              return prefixed === 'pfx' ? prop : true;\n            }\n          } // Otherwise just return true, or the property name if this is a\n          // `prefixed()` call\n          else {\n              cleanElems();\n              return prefixed === 'pfx' ? prop : true;\n            }\n        }\n      }\n\n      cleanElems();\n      return false;\n    }\n\n    ;\n    /**\n     * testProp() investigates whether a given style property is recognized\n     * Property names can be provided in either camelCase or kebab-case.\n     *\n     * @memberOf Modernizr\n     * @name Modernizr.testProp\n     * @access public\n     * @optionName Modernizr.testProp()\n     * @optionProp testProp\n     * @function testProp\n     * @param {string} prop - Name of the CSS property to check\n     * @param {string} [value] - Name of the CSS value to check\n     * @param {boolean} [useValue] - Whether or not to check the value if @supports isn't supported\n     * @returns {boolean} an empty string if the property is supported, undefined if its unsupported\n     * @example\n     *\n     * Just like [testAllProps](#modernizr-testallprops), only it does not check any vendor prefixed\n     * version of the string.\n     *\n     * Note that the property name must be provided in camelCase (e.g. boxSizing not box-sizing)\n     *\n     * ```js\n     * Modernizr.testProp('pointerEvents')  // true\n     * ```\n     *\n     * You can also provide a value as an optional second argument to check if a\n     * specific value is supported\n     *\n     * ```js\n     * Modernizr.testProp('pointerEvents', 'none') // true\n     * Modernizr.testProp('pointerEvents', 'penguin') // false\n     * ```\n     */\n\n    var testProp = ModernizrProto.testProp = function (prop, value, useValue) {\n      return testProps([prop], undefined, value, useValue);\n    }; // Run each test\n\n\n    testRunner(); // Remove the \"no-js\" class if it exists\n\n    setClasses(classes);\n    delete ModernizrProto.addTest;\n    delete ModernizrProto.addAsyncTest; // Run the things that are supposed to run after the tests\n\n    for (var i = 0; i < Modernizr._q.length; i++) {\n      Modernizr._q[i]();\n    } // Leak Modernizr namespace\n\n\n    window.Modernizr = Modernizr;\n    ;\n  })(window, document);\n\n  module.exports = window.Modernizr;\n\n  if (hadGlobal) {\n    window.Modernizr = oldGlobal;\n  } else {\n    delete window.Modernizr;\n  }\n})(window);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./.modernizrrc.js\n");

/***/ }),

/***/ "./assets/js/modernizr.js":
/*!********************************!*\
  !*** ./assets/js/modernizr.js ***!
  \********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var modernizr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! modernizr */ \"./.modernizrrc.js\");\n/* harmony import */ var modernizr__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(modernizr__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\n * Fix for touchevents on Chrome Desktop - Modernizr 3.7.1\n * https://github.com/Modernizr/Modernizr/issues/2431\n */\n\nmodernizr__WEBPACK_IMPORTED_MODULE_0___default.a.addTest('touchevents', function () {\n  if ('ontouchstart' in window) {\n    return true;\n  }\n\n  return false;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvbW9kZXJuaXpyLmpzP2RjNTYiXSwibmFtZXMiOlsiTW9kZXJuaXpyIiwiYWRkVGVzdCIsIndpbmRvdyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTs7Ozs7QUFJQUEsZ0RBQVMsQ0FBQ0MsT0FBVixDQUFrQixhQUFsQixFQUFpQyxZQUFXO0FBQzFDLE1BQUksa0JBQWtCQyxNQUF0QixFQUE4QjtBQUM1QixXQUFPLElBQVA7QUFDRDs7QUFFRCxTQUFPLEtBQVA7QUFDRCxDQU5EIiwiZmlsZSI6Ii4vYXNzZXRzL2pzL21vZGVybml6ci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNb2Rlcm5penIgZnJvbSAnbW9kZXJuaXpyJztcblxuLyoqXG4gKiBGaXggZm9yIHRvdWNoZXZlbnRzIG9uIENocm9tZSBEZXNrdG9wIC0gTW9kZXJuaXpyIDMuNy4xXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9pc3N1ZXMvMjQzMVxuICovXG5Nb2Rlcm5penIuYWRkVGVzdCgndG91Y2hldmVudHMnLCBmdW5jdGlvbigpIHtcbiAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./assets/js/modernizr.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ 3:
/*!**************************************!*\
  !*** multi ./assets/js/modernizr.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /home/harry/Work/Tincan/_DEFAULTS/Pippip/assets/js/modernizr.js */"./assets/js/modernizr.js");


/***/ })

/******/ });